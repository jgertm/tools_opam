load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")
load("//bootstrap:BUILD.bzl", "CMD_FLAGS", "BOOTSTRAP_INCLUDES")

load(":BUILD.bzl", "lemon") # , "DEBUG_DEFINES")

exports_files([
    "log.c", "log.h", "utarray.h", "uthash.h", "utstring.h"
])

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})

##########
cc_library(
    name  = "bootstrap",
    alwayslink = True,
    # linkstatic = 1,
    srcs  = [
        "config.c",
        "config.h",
        "driver.c",
        "driver.h",
        "frontend.c",
        "frontend.h",
        "emit_build_bazel.c",
        "emit_build_bazel.h",
        "meta_entries.c",
        "meta_entries.h",
        "meta_flags.c",
        "meta_flags.h",
        "meta_fs.c",
        "meta_fs.h",
        "meta_packages.c",
        "meta_packages.h",
        "meta_properties.c",
        "meta_properties.h",
        "meta_settings.c",
        "meta_settings.h",
        "meta_values.c",
        "meta_values.h",
        "obazl.c",
        "obazl.h",
        "opam.c",
        "opam.h",
        "opam_config.c",
        "opam_config.h",
        "opam_deps.c",
        "opam_deps.h",
        "opam_import.c",
        "opam_import.h",
        "opam_init_here.h",
        "opam_init_here.c",
        "opam_status.c",
        "opam_status.h",

        "run_cmd.c",
        "run_cmd.h",

        "log.c",
        "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    hdrs = [
        "bootstrap.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    defines = select({
        "//bzl/host:debug": [], # "DEBUG_TRACE"],
        "//conditions:default":   [], ##"DEBUG_DUMP"]
    }),
    copts = [
        "-std=c11",
        "-pedantic-errors",

        "-UDEBUG", # FIXME: macos fastbuild only

        ## NB: we need '-I.' because re2c will this into meta_syntaxis.c:
        ## #include "bazel-out/darwin-fastbuild/bin/external/opam/bootstrap/meta_syntaxis.h"
        "-I.",


        "-Ibootstrap",
        "-I$(GENDIR)/bootstrap",

        # "-I$(GENDIR)/opam/bootstrap",

        ## WARNING: importing this repo under any name other than
        ## 'opam' with break this:
        "-Iexternal/opam/bootstrap",
        "-I$(GENDIR)/external/opam/bootstrap",

        "-Iexternal/libinih",
    ],
    deps = [
        ":meta_lexis",
        ":meta_syntaxis",
        ":opam_parser",
        "//external/libinih:inih",
    ],
    visibility = ["//visibility:public"]
)

###########
cc_library(
    name = "meta_syntaxis",
    srcs = [
        "meta_syntaxis.c",
        "meta_syntaxis.h",
        "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
        ],
    # alwayslink = True,
    copts = [
        "-I.",
        "-Ibootstrap",
        "-Iopam/bootstrap",
        "-Iexternal/opam/bootstrap",
        "-I$(GENDIR)/external/opam/bootstrap",

    ],
    deps = ["opam_lexer"],
    visibility = ["//test:__subpackages__"]
)

########
lemon(
    name = "gen_meta_syntaxis",
    yy   = "meta_syntaxis.y",
    outs = ["meta_syntaxis.c","meta_syntaxis.out"],
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":yytrace-enabled": ["YYTRACE"],
        "//conditions:default":   []
    })
)

###########
cc_library(
    name = "meta_lexis",
    srcs = [
        # "meta_lexer.c", "meta_lexer.h",
        "meta_lexis.c", "meta_lexis.h",
        "log.c", "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    # alwayslink = True,
    hdrs = [
        "log.h",
        # "meta_lexer.h"
    ],
    copts = [
        "-Ibootstrap",
        "-Iopam/bootstrap",
        "-I$(GENDIR)/bootstrap",
        "-I$(GENDIR)/opam/bootstrap",
        "-I$(GENDIR)/external/opam/bootstrap"
    ],
    visibility = ["//test:__subpackages__"]
)

########
## re2c takes a long time to build. we do not need to run it every
## time once the grammar is stable, so we put the .c file under
## version control
genrule(
    name = "gen_meta_lexis",
    srcs = [
        "meta_lexis.re",
    ],
    tools = ["@opam_re2c//:re2c"],
    outs  = [
        "meta_lexis.c"
    ],
    cmd   = "\n".join([
        "for f in $(locations @opam_re2c//:re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f --conditions --tags -o $(@D)/meta_lexis.c $(location meta_lexis.re)",
    ]),
    visibility = ["//visibility:public"]
)

################################################################
####    OPAM Parser
################################################################
cc_library(
    name = "opam_parser",
    # name = "opam_syntaxis",
    srcs = [
        "opam_parser.c",
        "opam_parser.h",
        "opam_syntaxis.c",
        "opam_syntaxis.h",
        "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
        ],
    hdrs = [
        "libopamparser.h",
        # "opam_parser.h"
    ],
    copts = CMD_FLAGS + BOOTSTRAP_INCLUDES,
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-enabled": ["LEXDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["LEXDEBUG_FVF"],
        "//conditions:default":   []
    }),
    deps = ["opam_lexer"],
    visibility = ["//test:__subpackages__"]
)

lemon(
    name = "gen_opam_syntaxis",
    yy   = "opam_syntaxis.y",
    outs = ["opam_syntaxis.c","opam_syntaxis.out"],
    compress = False,
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-exit-on-error-enabled": ["YYDEBUG_EXIT_ON_ERROR"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-filter": ["YYDEBUG_FILTER"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-fpf": ["YYDEBUG_FPF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["YYDEBUG_FVF"],
        "//conditions:default":   []
    })
)

###########
cc_library(
    name = "opam_lexer",
    srcs = [
        "opam_lexer.c", "opam_lexer.h",
        "opam_lexis.c", "opam_lexis.h",
        "log.c", "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    copts = CMD_FLAGS + BOOTSTRAP_INCLUDES,
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-enabled": ["LEXDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-version": ["LEXDEBUG_VERSION"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fpf": ["LEXDEBUG_FPF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["LEXDEBUG_FVF"],
        "//conditions:default":   []
    }),
    visibility = ["//test:__subpackages__"]
)

genrule(
    name = "gen_opam_lexis",
    outs  = ["opam_lexis.c"],
    srcs = ["opam_lexis.re"],
    tools = ["@opam_re2c//:re2c"],
    cmd   = "\n".join([
        "for f in $(locations @opam_re2c//:re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f --conditions --tags -o $(@D)/opam_lexis.c $(location opam_lexis.re)",
    ]),
    visibility = ["//visibility:public"]
)

genrule(
    name = "parse_mkhdrs",
    srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        "opam_parser.c",
        "opam_syntaxis.c", ## defines token_type constants
        "opam_package.c" ## ast node types, etc.
    ],
    outs = [
        "opam_lexer.h",
        "opam_lexis.h",
        "opam_parser.h",
        "opam_syntaxis.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location opam_lexer.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location :makeheaders) \\",
        "    $(location opam_lexer.c) \\",
        "    $(location opam_lexis.c) \\",
        "    $(location opam_package.c) \\",
        "    $(location opam_parser.c) \\",
        "    $(location opam_syntaxis.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
        # "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

genrule(
    name = "parse_mkhdrs_export",
    srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        "opam_parser.c",
        "opam_syntaxis.c",
        "opam_package.c"
    ],
    outs = [
        "libopamparser.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location opam_lexis.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location :makeheaders) -H \\",
        "    $(location opam_lexer.c) \\",
        "    $(location opam_lexis.c) \\",
        "    $(location opam_package.c) \\",
        "    $(location opam_parser.c) \\",
        "    $(location opam_syntaxis.c) \\",
        "> $@"
        # "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

################################################################

########
genrule(
    name = "mkhdrs",
    srcs = [
        "config.c",
        "driver.c",
        "frontend.c",
        "emit_build_bazel.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_fs.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "meta_lexis.c",
        "meta_syntaxis.c",
        "obazl.c",
        "opam.c",
        "opam_config.c",
        "opam_deps.c",
        "opam_import.c",
        "opam_init_here.c",
        "opam_status.c",
        # "opam_syntaxis.c",
        "run_cmd.c"
    ],
    outs = [
        "config.h",
        "driver.h",
        "frontend.h",
        "emit_build_bazel.h",
        "meta_entries.h",
        "meta_flags.h",
        "meta_fs.h",
        "meta_packages.h",
        "meta_properties.h",
        "meta_settings.h",
        "meta_values.h",
        "meta_lexis.h",
        "meta_syntaxis.h",
        "obazl.h",
        "opam.h",
        "opam_config.h",
        "opam_deps.h",
        "opam_import.h",
        "opam_init_here.h",
        "opam_status.h",
        # "opam_syntaxis.h",
        "run_cmd.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location config.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location :makeheaders) \\",
        "    $(location config.c) \\",
        "    $(location driver.c) \\",
        "    $(location frontend.c) \\",
        "    $(location emit_build_bazel.c) \\",
        "    $(location meta_entries.c) \\",
        "    $(location meta_flags.c) \\",
        "    $(location meta_fs.c) \\",
        "    $(location meta_packages.c) \\",
        "    $(location meta_properties.c) \\",
        "    $(location meta_settings.c) \\",
        "    $(location meta_values.c) \\",
        "    $(location meta_lexis.c) \\",
        "    $(location meta_syntaxis.c) \\",
        "    $(location obazl.c) \\",
        "    $(location opam.c) \\",
        "    $(location opam_config.c) \\",
        "    $(location opam_deps.c) \\",
        "    $(location opam_import.c) \\",
        "    $(location opam_init_here.c) \\",
        "    $(location opam_status.c) \\",
        # "    $(location opam_syntaxis.h) \\",
        "    $(location run_cmd.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs-export",
    srcs = [
        "config.c",
        "driver.c",
        "frontend.c",
        "emit_build_bazel.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_fs.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "meta_lexis.c",
        "meta_syntaxis.c",
        "obazl.c",
        "opam.c",
        "opam_config.c",
        "opam_deps.c",
        "opam_import.c",
        "opam_init_here.c",
        "opam_lexer.c",
        "opam_parser.c",
        "opam_status.c",
        "run_cmd.c"
    ],
    outs = [
        "bootstrap.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location opam.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location :makeheaders) -H \\",
        "    $(location config.c) \\",
        "    $(location driver.c) \\",
        "    $(location frontend.c) \\",
        "    $(location emit_build_bazel.c) \\",
        "    $(location meta_entries.c) \\",
        "    $(location meta_flags.c) \\",
        "    $(location meta_fs.c) \\",
        "    $(location meta_packages.c) \\",
        "    $(location meta_properties.c) \\",
        "    $(location meta_settings.c) \\",
        "    $(location meta_values.c) \\",
        "    $(location meta_lexis.c) \\",
        "    $(location meta_syntaxis.c) \\",
        "    $(location obazl.c) \\",
        "    $(location opam.c) \\",
        "    $(location opam_config.c) \\",
        "    $(location opam_deps.c) \\",
        "    $(location opam_import.c) \\",
        "    $(location opam_init_here.c) \\",
        "    $(location opam_lexer.c) \\",
        "    $(location opam_parser.c) \\",
        "    $(location opam_status.c) \\",
        "    $(location run_cmd.c) \\",
        "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

################################################################
#### TOOLS

cc_binary(
    name  = "lemon",
    srcs  = ["lemon.c"],
)

cc_binary(
    name  = "makeheaders",
    srcs  = ["makeheaders.c"],
    copts = ["-O3"],
    linkstatic=1,
    visibility = [
        "//ingest:__pkg__",
        "//init:__pkg__",
        "//install:__pkg__",
        "//status:__pkg__",
        "//test:__subpackages__",
        "//update:__pkg__"
    ]
)
